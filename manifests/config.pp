# @summary A short summary of the purpose of this class
#
# A description of what this class does
#
# @example
#   include burrow::config
class burrow::config (
  $user,
  $group,
  $config_file,
  $pidfile,
  $stdout_logfile,
  $access_control_allow_origin,
  $logging_filename,
  $logging_level,
  $logging_maxsize,
  $logging_maxbackups,
  $logging_maxage,
  $logging_use_localtime,
  $logging_use_compression,
  $zookeeper_servers,
  $zookeeper_timeout,
  $zookeeper_root_path,
  $manage_client_profile,
  $client_subheading,
  $client_kafka_version,
  $client_id,
  $client_tls,
  $client_sasl,
  $manage_tls_profile,
  $tls_subheading,
  $tls_certfile,
  $tls_keyfile,
  $tls_cafile,
  $tls_no_verify,
  $manage_sasl_profile,
  $sasl_subheading,
  $sasl_username,
  $sasl_password,
  $sasl_handshake_first,
  $manage_httpserver_profile,
  $httpserver_subheading,
  $httpserver_address,
  $httpserver_timeout,
  $httpserver_tls,
  $manage_storage_profile,
  $storage_subheading,
  $storage_class_name,
  $storage_intervals,
  $storage_expire_group,
  $storage_workers,
  $storage_min_distance,
  $storage_group_whitelist,
  $manage_evaluator_profile,
  $evaluator_subheading,
  $evaluator_class_name,
  $evaluator_expire_cache,
  $evaluator_minimum_complete,
  $manage_cluster_profile,
  $cluster_subheading,
  $cluster_class_name,
  $cluster_servers,
  $cluster_client_profile,
  $cluster_topic_refresh,
  $cluster_offset_refresh,
  $manage_consumers,
  $consumers,
  $manage_notifiers,
  $notifiers,
){

  $_config = {
  'pidfile'                     => $pidfile,
  'stdout_logfile'              => $stdout_logfile,
  'access_control_allow_origin' => $access_control_allow_origin,
  'logging_filename'            => $logging_filename,
  'logging_level'               => $logging_level,
  'logging_maxsize'             => $logging_maxsize,
  'logging_maxbackups'          => $logging_maxbackups,
  'logging_maxage'              => $logging_maxage,
  'logging_use_localtime'       => $logging_use_localtime,
  'logging_use_compression'     => $logging_use_compression,
  'zookeeper_servers'           => $zookeeper_servers,
  'zookeeper_timeout'           => $zookeeper_timeout,
  'zookeeper_root_path'         => $zookeeper_root_path,
  'manage_client_profile'       => $manage_client_profile,
  'client_subheading'           => $client_subheading,
  'client_kafka_version'        => $client_kafka_version,
  'client_id'                   => $client_id,
  'client_tls'                  => $client_tls,
  'client_sasl'                 => $client_sasl,
  'manage_tls_profile'          => $manage_tls_profile,
  'tls_subheading'              => $tls_subheading,
  'tls_certfile'                => $tls_certfile,
  'tls_keyfile'                 => $tls_keyfile,
  'tls_cafile'                  => $tls_cafile,
  'tls_no_verify'               => $tls_no_verify,
  'manage_sasl_profile'         => $manage_sasl_profile,
  'sasl_subheading'             => $sasl_subheading,
  'sasl_username'               => $sasl_username,
  'sasl_password'               => $sasl_password,
  'sasl_handshake_first'        => $sasl_handshake_first,
  'manage_httpserver_profile'   => $manage_httpserver_profile,
  'httpserver_subheading'       => $httpserver_subheading,
  'httpserver_address'          => $httpserver_address,
  'httpserver_timeout'          => $httpserver_timeout,
  'httpserver_tls'              => $httpserver_tls,
  'manage_storage_profile'      => $manage_storage_profile,
  'storage_subheading'          => $storage_subheading,
  'storage_class_name'          => $storage_class_name,
  'storage_intervals'           => $storage_intervals,
  'storage_expire_group'        => $storage_expire_group,
  'storage_workers'             => $storage_workers,
  'storage_min_distance'        => $storage_min_distance,
  'storage_group_whitelist'     => $storage_group_whitelist,
  'manage_evaluator_profile'    => $manage_evaluator_profile,
  'evaluator_subheading'        => $evaluator_subheading,
  'evaluator_class_name'        => $evaluator_class_name,
  'evaluator_expire_cache'      => $evaluator_expire_cache,
  'evaluator_minimum_complete'  => $evaluator_minimum_complete,
  'manage_cluster_profile'      => $manage_cluster_profile,
  'cluster_subheading'          => $cluster_subheading,
  'cluster_class_name'          => $cluster_class_name,
  'cluster_servers'             => $cluster_servers,
  'cluster_client_profile'      => $cluster_client_profile,
  'cluster_topic_refresh'       => $cluster_topic_refresh,
  'cluster_offset_refresh'      => $cluster_offset_refresh,
  'manage_consumers'            => $manage_consumers,
  'consumers'                   => $consumers,
  'manage_notifiers'            => $manage_notifiers,
  'notifiers'                   => $notifiers,
  }

  file { $config_file:
    owner => $user,
    group => $group,
    mode  => '0644',
    content => epp('burrow/config.epp', $_config),
  }

  $config_file_dir = dirname($config_file)

  $_default_templates = [
    'default-email.tmpl',
    'default-http-delete.tmpl',
    'default-http-post.tmpl',
    'default-slack-delete.tmpl',
    'default-slack-post.tmpl',
  ]

  file { $config_file_dir:
    ensure => directory,
    owner  => $user,
    group  => $group,
    mode   => '0644',
  }

  $_default_templates.each |$template| {
    file { "${config_file_dir}/${template}":
      owner   => $user,
      group   => $group,
      mode    => '0755',
      source  => "puppet:///modules/burrow/${template}",
      require => File[$config_file_dir],
    }
  }

}
